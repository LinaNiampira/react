{"version":3,"sources":["components/apps/data.js","components/apps/App.js","reportWebVitals.js","index.js"],"names":["data","id","nombre","apellido","console","log","App","state","modalActualizar","modalInsertar","form","mostrarModalActualizar","dato","setState","cerrarModalActualizar","mostrarModalInsertar","cerrarModalInsertar","editar","contador","arreglo","map","registro","eliminar","window","confirm","splice","insertar","valorNuevo","length","lista","push","handleChange","e","target","name","value","Container","Button","color","onClick","this","FormGroup","className","readOnly","type","onChange","Table","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f98a2f4e.chunk.js","sourcesContent":["\r\nconst data = [\r\n\r\n    {\r\n     id: 1,\r\n     nombre: \"Lina\",\r\n     apellido: \"Niampira\",\r\n    },\r\n    {\r\n     id: 2,\r\n     nombre: \"Laura\",\r\n     apellido: \"Mora\",\r\n    },\r\n    {\r\n     id: 3,\r\n     nombre: \"Nubia\",\r\n     apellido: \"Villarraga\",\r\n    },\r\n    {\r\n    id: 4,\r\n    nombre: \"Benjamin \",\r\n    apellido: \"Hernandez\",\r\n    },\r\n    {\r\n    id: 5,\r\n    nombre: \"Estela\",\r\n    apellido: \"Morales\",\r\n    },\r\n    {\r\n    id: 6,\r\n    nombre: \"Cristhian\",\r\n    apellido: \"Niampira\",\r\n    }\r\n//]\r\n];\r\n\r\nexport default data;\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport './data.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Table,\n  Button,\n  Container,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  FormGroup,\n  ModalFooter,\n} from 'reactstrap';\n\nimport data from './data';\n\nconsole.log('data: ' + data);\n\nclass App extends React.Component {\n  state = {\n    data: data,\n    modalActualizar: false,\n    modalInsertar: false,\n    form: {\n      id: '',\n      nombre: '',\n      apellido: '',\n    },\n  };\n\n  mostrarModalActualizar = (dato) => {\n    this.setState({\n      form: dato,\n      modalActualizar: true,\n    });\n  };\n\n  cerrarModalActualizar = () => {\n    this.setState({ modalActualizar: false });\n  };\n\n  mostrarModalInsertar = () => {\n    this.setState({\n      modalInsertar: true,\n    });\n  };\n\n  cerrarModalInsertar = () => {\n    this.setState({ modalInsertar: false });\n  };\n\n  editar = (dato) => {\n    var contador = 0;\n    var arreglo = this.state.data;\n    arreglo.map((registro) => {\n      if (dato.id == registro.id) {\n        arreglo[contador].nombre = dato.nombre;\n        arreglo[contador].apellido = dato.apellido;\n      }\n      contador++;\n    });\n    this.setState({ data: arreglo, modalActualizar: false });\n  };\n\n  eliminar = (dato) => {\n    var opcion = window.confirm(\n      'EstÃ¡s Seguro que deseas Eliminar el elemento ' + dato.id\n    );\n    if (opcion == true) {\n      var contador = 0;\n      var arreglo = this.state.data;\n      arreglo.map((registro) => {\n        if (dato.id == registro.id) {\n          arreglo.splice(contador, 1);\n        }\n        contador++;\n      });\n      this.setState({ data: arreglo, modalActualizar: false });\n    }\n  };\n\n  insertar = () => {\n    var valorNuevo = { ...this.state.form };\n    valorNuevo.id = this.state.data.length + 1;\n    var lista = this.state.data;\n    lista.push(valorNuevo);\n    this.setState({ modalInsertar: false, data: lista });\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Container>\n          <br />\n          <Button color=\"success\" onClick={() => this.mostrarModalInsertar()}>\n            Crear\n          </Button>\n          <br></br>\n\n          {/*panel de actualizar*/}\n          {this.state.modalActualizar && (\n            <div id=\"actualizar\">\n              <div>\n                <h3>Editar Registro</h3>\n              </div>\n\n              <FormGroup>\n                <label>Id:</label>\n\n                <input\n                  className=\"form-control\"\n                  readOnly\n                  type=\"text\"\n                  value={this.state.form.id}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <label>Nombre:</label>\n                <input\n                  className=\"form-control\"\n                  name=\"nombre\"\n                  type=\"text\"\n                  onChange={this.handleChange}\n                  value={this.state.form.nombre}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <label>Apellido:</label>\n                <input\n                  className=\"form-control\"\n                  name=\"apellido\"\n                  type=\"text\"\n                  onChange={this.handleChange}\n                  value={this.state.form.apellido}\n                />\n              </FormGroup>\n\n              <Button\n                color=\"primary\"\n                onClick={() => this.editar(this.state.form)}\n              >\n                Editar\n              </Button>\n              <Button\n                color=\"danger\"\n                onClick={() => this.cerrarModalActualizar()}\n              >\n                Cancelar\n              </Button>\n            </div>\n          )}\n\n          {/*panel de insertar*/}\n          {this.state.modalInsertar && (\n            <div id=\"crearReg\">\n              <div>\n                <h3>Insertar Personaje</h3>\n              </div>\n\n              <FormGroup>\n                <label>Id:</label>\n\n                <input\n                  className=\"form-control\"\n                  readOnly\n                  type=\"text\"\n                  value={this.state.data.length + 1}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <label>Nombre:</label>\n                <input\n                  className=\"form-control\"\n                  name=\"nombre\"\n                  type=\"text\"\n                  onChange={this.handleChange}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <label>Apellido:</label>\n                <input\n                  className=\"form-control\"\n                  name=\"apellido\"\n                  type=\"text\"\n                  onChange={this.handleChange}\n                />\n              </FormGroup>\n\n              <Button color=\"primary\" onClick={() => this.insertar()}>\n                Insertar\n              </Button>\n              <Button\n                className=\"btn btn-danger\"\n                onClick={() => this.cerrarModalInsertar()}\n              >\n                Cancelar\n              </Button>\n            </div>\n          )}\n          <Table>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Nombre</th>\n                <th>Apellido</th>\n                <th>AcciÃ³n</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {this.state.data.map((dato) => (\n                <tr key={dato.id}>\n                  <td>{dato.id}</td>\n                  <td>{dato.nombre}</td>\n                  <td>{dato.apellido}</td>\n                  <td>\n                    <Button\n                      color=\"primary\"\n                      onClick={() => this.mostrarModalActualizar(dato)}\n                    >\n                      Editar\n                    </Button>\n                    {'  '}\n                    <Button color=\"danger\" onClick={() => this.eliminar(dato)}>\n                      Eliminar\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Container>\n      </>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/apps/App';\nimport './components/apps/data';\n\n\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}